-- 1. EDUCATION Table
CREATE TABLE EDUCATION (
    EDUCATION_ID SERIAL PRIMARY KEY,
    EDUCATION_name VARCHAR(100));
-- 2. SALARY Table
CREATE TABLE SALARY (
    SALARY_ID SERIAL PRIMARY KEY,
    SALARY INT);
-- 3. EMPLOYEE Table
CREATE TABLE EMPLOYEE (
    EMPLOYEE_ID VARCHAR(10) PRIMARY KEY,
    EMPLOYEE_name VARCHAR(100) NOT NULL,
    EMPLOYEE_email VARCHAR(100) NOT NULL,
    EMPLOYEE_hire DATE,
    CONSTRAINT email_format
    CHECK (EMPLOYEE_email LIKE '%_@__%.__%'),
    EDUCATION_ID INT,
    FOREIGN KEY(EDUCATION_ID) REFERENCES EDUCATION(EDUCATION_ID));
-- 4. LOCATION Table
CREATE TABLE LOCATION (
    LOCATION_ID SERIAL PRIMARY KEY,
    LOCATION_name VARCHAR(100) UNIQUE);
-- 5. STATE Table
CREATE TABLE STATE ( 
    STATE_ID SERIAL PRIMARY KEY,
    STATE_name VARCHAR(2) UNIQUE,
    LOCATION_ID INT,
    FOREIGN KEY(LOCATION_ID) REFERENCES LOCATION(LOCATION_ID));
-- 6. CITY Table
CREATE TABLE CITY ( 
    CITY_ID SERIAL PRIMARY KEY,
    CITY_name VARCHAR(100) UNIQUE,
    STATE_ID INT,
    FOREIGN KEY(STATE_ID) REFERENCES STATE(STATE_ID));
-- 7. ADDRESS Table
CREATE TABLE ADDRESS ( 
    ADDRESS_ID SERIAL PRIMARY KEY,
    ADDRESS_name VARCHAR(100) UNIQUE,
    CITY_ID INT,
    FOREIGN KEY(CITY_ID) REFERENCES CITY(CITY_ID));
-- 8. JOB Table
CREATE TABLE JOB (
    JOB_ID SERIAL PRIMARY KEY,
    JOB_name VARCHAR(100) UNIQUE);
-- 9. DEPARTMENT Table
CREATE TABLE DEPARTMENT (
    DEPARTMENT_ID SERIAL PRIMARY KEY,
    DEPARTMENT_name VARCHAR(100) UNIQUE);
-- 10. EMPLOYEE_HISTORY Table
CREATE TABLE EMPLOYEE_HISTORY (
    EMPLOYEE_ID VARCHAR(10),
    JOB_ID INT,
    DEPARTMENT_ID INT,
    ADDRESS_ID INT,
    EMP_HIST_start DATE,
    EMP_HIST_end DATE,
    MANAGER_ID VARCHAR(10) NULL,
    SALARY_ID INT,
    PRIMARY KEY(EMPLOYEE_ID, EMP_HIST_start),
    FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID),
    FOREIGN KEY(JOB_ID) REFERENCES JOB(JOB_ID),
    FOREIGN KEY(DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID),
    FOREIGN KEY(ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID),
    FOREIGN KEY(MANAGER_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID), 
    FOREIGN KEY(SALARY_ID) REFERENCES SALARY(SALARY_ID));

-- POPULATE TABLE
INSERT INTO EDUCATION (EDUCATION_name)
SELECT DISTINCT education_lvl
FROM proj_stg;

INSERT INTO SALARY (SALARY)
SELECT DISTINCT salary
FROM proj_stg;

INSERT INTO EMPLOYEE (EMPLOYEE_ID, EMPLOYEE_name, EMPLOYEE_email, EMPLOYEE_hire, EDUCATION_ID)
SELECT DISTINCT stg.Emp_ID, stg.Emp_NM, stg.Email, stg.hire_dt, edu.EDUCATION_ID
FROM proj_stg AS stg
JOIN EDUCATION AS edu ON edu.EDUCATION_name = stg.education_lvl;

INSERT INTO LOCATION (LOCATION_name)
SELECT DISTINCT location
FROM proj_stg;

INSERT INTO STATE (STATE_name, LOCATION_ID)
SELECT DISTINCT state, loc.LOCATION_ID
FROM proj_stg AS stg
JOIN LOCATION AS loc ON loc.LOCATION_name = stg.location;

INSERT INTO CITY (CITY_name, STATE_ID)
SELECT DISTINCT city, state.STATE_ID
FROM proj_stg AS stg
JOIN STATE AS state ON state.STATE_name = stg.state;

INSERT INTO ADDRESS (ADDRESS_name, CITY_ID)
SELECT DISTINCT address, city.CITY_ID
FROM proj_stg AS stg
JOIN CITY AS city ON city.CITY_name = stg.city;

INSERT INTO JOB (JOB_name)
SELECT DISTINCT job_title
FROM proj_stg;

INSERT INTO DEPARTMENT (DEPARTMENT_name)
SELECT DISTINCT department_nm
FROM proj_stg;

INSERT INTO EMPLOYEE_HISTORY (
    EMPLOYEE_ID, 
    JOB_ID, 
    DEPARTMENT_ID, 
    ADDRESS_ID, 
    EMP_HIST_start, 
    EMP_HIST_end, 
    MANAGER_ID, 
    SALARY_ID
)
SELECT 
    stg.Emp_ID, 
    job.JOB_ID, 
    dept.DEPARTMENT_ID, 
    addr.ADDRESS_ID, 
    stg.start_dt, 
    stg.end_dt, 
    CASE 
        WHEN TRIM(stg.manager) = '' THEN stg.Emp_ID
        WHEN LOWER(TRIM(stg.manager)) = 'none' THEN stg.Emp_ID
        ELSE mgr.EMPLOYEE_ID
    END AS MANAGER_ID,
    sal.SALARY_ID
FROM proj_stg AS stg
JOIN JOB AS job ON job.JOB_name = stg.job_title
JOIN DEPARTMENT AS dept ON dept.DEPARTMENT_name = stg.department_nm
JOIN ADDRESS AS addr ON addr.ADDRESS_name = stg.address
LEFT JOIN EMPLOYEE AS mgr ON mgr.EMPLOYEE_name = stg.manager
JOIN SALARY AS sal ON sal.SALARY = stg.salary;
